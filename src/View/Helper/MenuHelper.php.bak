<?php
namespace Agere\Menu\View\Helper;

use Zend\View\Helper\AbstractHelper,
	Agere\Users\Acl\Acl;

class Menu extends AbstractHelper
{
	/**
	 * @var \Agere\Menu\Service\MenuService
	 */
	protected $_menuService;
	protected $user;
	protected $authEvent;
	protected $acl;
	protected $access;
	protected $accessTotal;


	/**
	 * @param array $user
	 * @param $locator
	 */
	public function __construct($user, $locator) {
		$this->_menuService = $locator->get('MenuService');
		$this->user = $user;

		$this->authEvent = $locator->get('Agere\Users\Event\Authentication');
		$this->acl = $this->authEvent->getAclClass();
		$this->access = Acl::getAccess();
		$this->accessTotal = Acl::getAccessTotal();
	}

	/**
	 * @param string $controller
	 * @param string $action
	 * @return string
	 */
	public function menuList($controller = 'settings', $action = 'index')
	{
		$menuArray = [];

		$collectionHomeMenu = $this->_menuService->getItemsCollection(['controller' => $controller, 'action' => $action]);
		$collectionHomeMenu = $collectionHomeMenu->next();

		$collections = $this->_menuService->getItemsCollection(['left' => [$collectionHomeMenu->getLeft(), '>'], 'right' => [$collectionHomeMenu->getRight(), '<']]);

		while ($collection = $collections->next())
		{
			$detail = [
				'menu'			=> $collection->getMenu(),
				'controller'	=> $collection->getController(),
				'action'		=> $collection->getAction(),
			];

			$resource = $detail['controller'].'/'.$detail['action'];
			$detail['isAllowed'] = $this->_isAllowed($resource);

			if (! $collection->getParentId())
			{
				$menuArray[$collection->getId()] = $detail;
			}
			else if (isset($menuArray[$collection->getParentId()]))
			{
				$menuArray[$collection->getParentId()]['children'][$collection->getId()] = $detail;
			}
		}

		$menuArray = $this->_menuAccess($menuArray);

		return $this->_menuHtml($menuArray);
	}

	protected function _menuAccess(array $menuArray, $level = 0)
	{
		foreach ($menuArray as $key => $val)
		{
			if (isset($menuArray[$key]['children']))
			{
				$menuArray[$key]['children'] = $this->_menuAccess($menuArray[$key]['children'], $level + 1);
			}

			if (! $menuArray[$key]['isAllowed'] && ((isset($menuArray[$key]['children']) && ! $menuArray[$key]['children']) OR ! isset($menuArray[$key]['children'])))
			{
				unset($menuArray[$key]);
			}
		}

		return $menuArray;
	}

	/**
	 * @param array $menuArray
	 * @param int $level
	 * @return string
	 */
	protected function _menuHtml(array $menuArray, $level = 1)
	{
		$menu = '';

		foreach ($menuArray as $val)
		{
			$child = '';

			if (isset($val['children']) && $val['children'])
			{
				$child = $this->_menuHtml($val['children'], $level + 1);
				$title = ($val['controller'] != '') ? "<a href=\"/{$val['controller']}/{$val['action']}\">{$val['menu']}</a>" : "<a href=\"#\">{$val['menu']}</a><span class=\"figure arrow-down\"></span>";
				$content = $title.$child;
			}
			else
			{
				$content = "<a href=\"/{$val['controller']}/{$val['action']}\">{$val['menu']}</a>";

                if ($val['controller'] == 'city' && $val['action'] == 'index' && $this->_isAllowed('city/edit'))
                {
                    $content .= '<div class="notification">'.$this->getView()->city()->numberUnread().'</div>';
                }
			}

			$menu .= "<li>{$content}</li>";
		}

		return "<ul class=\"level-{$level}\">{$menu}</ul>";
	}

    /**
     * @param string $resource
     * @return bool
     */
    protected function _isAllowed($resource)
    {
        $allowed = [$this->acl->isAllowed($this->user['mnemo'], 'all', $this->accessTotal)];

        if ($this->acl->hasResource($resource))
        {
            $allowed[] = $this->acl->isAllowed($this->user['mnemo'], $resource, $this->accessTotal);
            $allowed[] = $this->acl->isAllowed($this->user['mnemo'], $resource, $this->access['write']);
            $allowed[] = $this->acl->isAllowed($this->user['mnemo'], $resource, $this->access['read']);
        }

        return in_array(true, $allowed);
    }

    /**
     * @return mixed
     */
    public function menuHome()
    {
        return $this->_menuService->getItemsCollection(['level' => 0]);
    }

}